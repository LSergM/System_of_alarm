

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sat Jul 22 12:26:29 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	12F629
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	swtext1,local,class=CONST,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	dabs	1,0x5E,2
    17  0000                     
    18                           ; Version 1.42
    19                           ; Generated 13/04/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC12F629 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0019                     	;# 
    66  0081                     	;# 
    67  0085                     	;# 
    68  008C                     	;# 
    69  008E                     	;# 
    70  0090                     	;# 
    71  0095                     	;# 
    72  0096                     	;# 
    73  0096                     	;# 
    74  0099                     	;# 
    75  009A                     	;# 
    76  009A                     	;# 
    77  009B                     	;# 
    78  009C                     	;# 
    79  009D                     	;# 
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  000A                     	;# 
    87  000B                     	;# 
    88  000C                     	;# 
    89  000E                     	;# 
    90  000E                     	;# 
    91  000F                     	;# 
    92  0010                     	;# 
    93  0019                     	;# 
    94  0081                     	;# 
    95  0085                     	;# 
    96  008C                     	;# 
    97  008E                     	;# 
    98  0090                     	;# 
    99  0095                     	;# 
   100  0096                     	;# 
   101  0096                     	;# 
   102  0099                     	;# 
   103  009A                     	;# 
   104  009A                     	;# 
   105  009B                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  0000                     	;# 
   109  0001                     	;# 
   110  0002                     	;# 
   111  0003                     	;# 
   112  0004                     	;# 
   113  0005                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000E                     	;# 
   118  000E                     	;# 
   119  000F                     	;# 
   120  0010                     	;# 
   121  0019                     	;# 
   122  0081                     	;# 
   123  0085                     	;# 
   124  008C                     	;# 
   125  008E                     	;# 
   126  0090                     	;# 
   127  0095                     	;# 
   128  0096                     	;# 
   129  0096                     	;# 
   130  0099                     	;# 
   131  009A                     	;# 
   132  009A                     	;# 
   133  009B                     	;# 
   134  009C                     	;# 
   135  009D                     	;# 
   136  0000                     	;# 
   137  0001                     	;# 
   138  0002                     	;# 
   139  0003                     	;# 
   140  0004                     	;# 
   141  0005                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0019                     	;# 
   150  0081                     	;# 
   151  0085                     	;# 
   152  008C                     	;# 
   153  008E                     	;# 
   154  0090                     	;# 
   155  0095                     	;# 
   156  0096                     	;# 
   157  0096                     	;# 
   158  0099                     	;# 
   159  009A                     	;# 
   160  009A                     	;# 
   161  009B                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  000A                     	;# 
   171  000B                     	;# 
   172  000C                     	;# 
   173  000E                     	;# 
   174  000E                     	;# 
   175  000F                     	;# 
   176  0010                     	;# 
   177  0019                     	;# 
   178  0081                     	;# 
   179  0085                     	;# 
   180  008C                     	;# 
   181  008E                     	;# 
   182  0090                     	;# 
   183  0095                     	;# 
   184  0096                     	;# 
   185  0096                     	;# 
   186  0099                     	;# 
   187  009A                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192                           
   193                           	psect	strings
   194  00D4                     __pstrings:	
   195  00D4                     stringtab:	
   196  00D4                     __stringtab:	
   197  00D4                     stringcode:	
   198                           ;	String table - string pointers are 1 byte each
   199                           
   200  00D4                     stringdir:	
   201  00D4  3000               	movlw	high stringdir
   202  00D5  008A               	movwf	10
   203  00D6  0804               	movf	4,w
   204  00D7  0A84               	incf	4,f
   205  00D8  0782               	addwf	2,f
   206  00D9                     __stringbase:	
   207  00D9  3400               	retlw	0
   208  00DA                     __end_of__stringtab:	
   209  00DA                     _num_in:	
   210  00DA  3404               	retlw	4
   211  00DB  3410               	retlw	16
   212  00DC  3420               	retlw	32
   213  00DD                     __end_of_num_in:	
   214  000E                     _TMR1	set	14
   215  0019                     _CMCONbits	set	25
   216  0010                     _T1CONbits	set	16
   217  0005                     _GPIO	set	5
   218  0005                     _GPIObits	set	5
   219  000C                     _PIR1bits	set	12
   220  0099                     _VRCON	set	153
   221  0085                     _TRISIObits	set	133
   222  0095                     _WPUbits	set	149
   223  0081                     _OPTION_REG	set	129
   224                           
   225                           ; #config settings
   226  0000                     
   227                           	psect	cinit
   228  0010                     start_initialization:	
   229  0010                     __initialization:	
   230                           
   231                           ; Clear objects allocated to BANK0
   232  0010  01A0               	clrf	__pbssBANK0& (0+127)
   233  0011  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   234  0012  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   235  0013  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   236  0014  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   237  0015  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   238  0016  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   239  0017  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   240  0018  01A8               	clrf	(__pbssBANK0+8)& (0+127)
   241  0019  01A9               	clrf	(__pbssBANK0+9)& (0+127)
   242  001A  01AA               	clrf	(__pbssBANK0+10)& (0+127)
   243  001B                     end_of_initialization:	
   244                           ;End of C runtime variable initialization code
   245                           
   246  001B                     __end_of__initialization:	
   247  001B  0183               	clrf	3
   248  001C  281D               	ljmp	_main	;jump to C main() function
   249                           
   250                           	psect	bssBANK0
   251  0020                     __pbssBANK0:	
   252  0020                     unharitate@cnt:	
   253  0020                     	ds	8
   254  0028                     _timer:	
   255  0028                     	ds	2
   256  002A                     unharitate@in_state:	
   257  002A                     	ds	1
   258                           
   259                           	psect	cstackCOMMON
   260  0000                     __pcstackCOMMON:	
   261  0000                     ??_ConfigureOscillator:	
   262  0000                     ??_InitApp:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0000                     ??_SetTimer:	
   266                           ; 1 bytes @ 0x0
   267                           
   268                           
   269                           	psect	cstackBANK0
   270  002B                     __pcstackBANK0:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  002B                     ?_ConfigureOscillator:	
   274  002B                     ?_InitApp:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  002B                     ?_isr:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  002B                     ??_isr:	
   281                           ; 1 bytes @ 0x0
   282                           
   283  002B                     ?_main:	
   284                           ; 1 bytes @ 0x0
   285                           
   286                           
   287                           ; 1 bytes @ 0x0
   288  002B                     	ds	4
   289  002F                     ?_SetTimer:	
   290  002F                     SetTimer@ticks:	
   291                           ; 1 bytes @ 0x4
   292                           
   293                           
   294                           ; 2 bytes @ 0x4
   295  002F                     	ds	2
   296  0031                     ??_main:	
   297                           
   298                           ; 1 bytes @ 0x6
   299  0031                     	ds	1
   300  0032                     main@inputs:	
   301                           
   302                           ; 1 bytes @ 0x7
   303  0032                     	ds	1
   304  0033                     main@system_state:	
   305                           
   306                           ; 1 bytes @ 0x8
   307  0033                     	ds	1
   308                           
   309                           	psect	maintext
   310  001D                     __pmaintext:	
   311 ;;
   312 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   313 ;;
   314 ;; *************** function _main *****************
   315 ;; Defined at:
   316 ;;		line 66 in file "main.c"
   317 ;; Parameters:    Size  Location     Type
   318 ;;		None
   319 ;; Auto vars:     Size  Location     Type
   320 ;;  system_state    1    8[BANK0 ] unsigned char 
   321 ;;  inputs          1    7[BANK0 ] unsigned char 
   322 ;; Return value:  Size  Location     Type
   323 ;;                  1    wreg      void 
   324 ;; Registers used:
   325 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   326 ;; Tracked objects:
   327 ;;		On entry : B00/0
   328 ;;		On exit  : 0/0
   329 ;;		Unchanged: 0/0
   330 ;; Data sizes:     COMMON   BANK0
   331 ;;      Params:         0       0
   332 ;;      Locals:         0       2
   333 ;;      Temps:          0       1
   334 ;;      Totals:         0       3
   335 ;;Total ram usage:        3 bytes
   336 ;; Hardware stack levels required when called:    2
   337 ;; This function calls:
   338 ;;		_ConfigureOscillator
   339 ;;		_InitApp
   340 ;;		_SetTimer
   341 ;; This function is called by:
   342 ;;		Startup code after reset
   343 ;; This function uses a non-reentrant model
   344 ;;
   345                           
   346                           
   347                           ;psect for function _main
   348  001D                     _main:	
   349                           
   350                           ;main.c: 68: enum {
   351                           ;main.c: 69: WITHOUT_PROTECT = 0,
   352                           ;main.c: 70: STARTING_FIST_SIREN = 1,
   353                           ;main.c: 71: STARTING_SECOND_SIREN = 2,
   354                           ;main.c: 72: STARTING = 3,
   355                           ;main.c: 73: AT_THE_GUARD = 4,
   356                           ;main.c: 74: STOPPING_FIST_SIREN = 5,
   357                           ;main.c: 75: STOPPING_SECOND_SIREN = 6,
   358                           ;main.c: 76: STOPPING = 7,
   359                           ;main.c: 77: };
   360                           ;main.c: 79: uint8_t system_state = STARTING_FIST_SIREN;
   361                           
   362                           ;incstack = 0
   363                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   364  001D  1283               	bcf	3,5	;RP0=0, select bank0
   365  001E  01B3               	clrf	main@system_state
   366  001F  0AB3               	incf	main@system_state,f
   367                           
   368                           ;main.c: 80: uint8_t inputs = 0;
   369  0020  01B2               	clrf	main@inputs
   370                           
   371                           ;main.c: 82: ConfigureOscillator();
   372  0021  20EE               	fcall	_ConfigureOscillator
   373                           
   374                           ;main.c: 85: InitApp();
   375  0022  20AD               	fcall	_InitApp
   376  0023  289E               	goto	l796
   377  0024                     l798:	
   378                           
   379                           ;main.c: 90: {
   380                           ;main.c: 91: PIR1bits.TMR1IF = 0;
   381  0024  100C               	bcf	12,0	;volatile
   382                           
   383                           ;main.c: 92: if (timer) timer--;
   384  0025  0828               	movf	_timer,w
   385  0026  0429               	iorwf	_timer+1,w
   386  0027  1903               	btfsc	3,2
   387  0028  28A1               	goto	l862
   388  0029  3001               	movlw	1
   389  002A  02A8               	subwf	_timer,f
   390  002B  3000               	movlw	0
   391  002C  1C03               	skipc
   392  002D  03A9               	decf	_timer+1,f
   393  002E  02A9               	subwf	_timer+1,f
   394                           
   395                           ;main.c: 93: }
   396                           ;main.c: 97: switch(system_state)
   397  002F  28A1               	goto	l862
   398  0030                     l32:	
   399                           ;main.c: 98: {
   400                           ;main.c: 99: case WITHOUT_PROTECT:
   401                           
   402                           
   403                           ;main.c: 100: GPIObits.GP1 = 0;
   404  0030  1085               	bcf	5,1	;volatile
   405                           
   406                           ;main.c: 101: if((0 == GPIObits.GP5))
   407  0031  1A85               	btfsc	5,5	;volatile
   408  0032  289E               	goto	l796
   409                           
   410                           ;main.c: 102: {
   411                           ;main.c: 103: SetTimer(1);
   412  0033  3001               	movlw	1
   413  0034  00AF               	movwf	SetTimer@ticks
   414  0035  3000               	movlw	0
   415  0036  00B0               	movwf	SetTimer@ticks+1
   416  0037  20DD               	fcall	_SetTimer
   417                           
   418                           ;main.c: 104: system_state = STARTING_FIST_SIREN;
   419  0038  1283               	bcf	3,5	;RP0=0, select bank0
   420  0039  01B3               	clrf	main@system_state
   421  003A  0AB3               	incf	main@system_state,f
   422                           
   423                           ;main.c: 105: }
   424                           ;main.c: 106: break;
   425  003B  289E               	goto	l796
   426  003C                     l35:	
   427                           ;main.c: 107: case STARTING_FIST_SIREN:
   428                           
   429                           
   430                           ;main.c: 108: GPIObits.GP1 = 1;
   431  003C  1485               	bsf	5,1	;volatile
   432                           
   433                           ;main.c: 109: if (0 == timer)
   434  003D  0828               	movf	_timer,w
   435  003E  0429               	iorwf	_timer+1,w
   436  003F  1D03               	btfss	3,2
   437  0040  289E               	goto	l796
   438                           
   439                           ;main.c: 110: {
   440                           ;main.c: 111: SetTimer(200);
   441  0041  30C8               	movlw	200
   442  0042  00AF               	movwf	SetTimer@ticks
   443  0043  3000               	movlw	0
   444  0044  00B0               	movwf	SetTimer@ticks+1
   445  0045  20DD               	fcall	_SetTimer
   446                           
   447                           ;main.c: 112: system_state = STARTING_SECOND_SIREN;
   448  0046  3002               	movlw	2
   449  0047  2894               	goto	L6
   450  0048                     l37:	
   451                           ;main.c: 115: case STARTING_SECOND_SIREN:
   452                           
   453                           ;main.c: 113: }
   454                           ;main.c: 114: break;
   455                           
   456                           
   457                           ;main.c: 116: GPIObits.GP1 = 0;
   458  0048  1085               	bcf	5,1	;volatile
   459                           
   460                           ;main.c: 117: GPIObits.GP0 = 1;
   461  0049  1405               	bsf	5,0	;volatile
   462                           
   463                           ;main.c: 118: if (0 == timer)
   464  004A  0828               	movf	_timer,w
   465  004B  0429               	iorwf	_timer+1,w
   466  004C  1D03               	btfss	3,2
   467  004D  2873               	goto	L8
   468                           
   469                           ;main.c: 119: {
   470                           ;main.c: 120: SetTimer(1);
   471  004E  3001               	movlw	1
   472  004F  00AF               	movwf	SetTimer@ticks
   473  0050  3000               	movlw	0
   474  0051  00B0               	movwf	SetTimer@ticks+1
   475  0052  20DD               	fcall	_SetTimer
   476                           
   477                           ;main.c: 121: system_state = STARTING;
   478  0053  3003               	movlw	3
   479  0054  1283               	bcf	3,5	;RP0=0, select bank0
   480  0055  00B1               	movwf	??_main
   481  0056  0831               	movf	??_main,w
   482  0057  00B3               	movwf	main@system_state
   483  0058  2873               	goto	L8
   484  0059                     l40:	
   485                           ;main.c: 129: case STARTING:
   486                           
   487                           ;main.c: 127: }
   488                           ;main.c: 128: break;
   489                           
   490                           ;main.c: 126: system_state = STOPPING_FIST_SIREN;
   491                           
   492                           ;main.c: 124: {
   493                           ;main.c: 125: SetTimer(1);
   494                           
   495                           ;main.c: 122: }
   496                           ;main.c: 123: if((0 == GPIObits.GP4))
   497                           
   498                           
   499                           ;main.c: 130: GPIObits.GP1 = 1;
   500  0059  1485               	bsf	5,1	;volatile
   501                           
   502                           ;main.c: 131: if (0 == timer)
   503  005A  0828               	movf	_timer,w
   504  005B  0429               	iorwf	_timer+1,w
   505  005C  1D03               	btfss	3,2
   506  005D  289E               	goto	l796
   507                           
   508                           ;main.c: 132: {
   509                           ;main.c: 133: system_state = AT_THE_GUARD;
   510  005E  3004               	movlw	4
   511  005F  2895               	goto	L5
   512  0060                     l830:	
   513                           ;main.c: 136: case AT_THE_GUARD:
   514                           
   515                           ;main.c: 134: }
   516                           ;main.c: 135: break;
   517                           
   518                           
   519                           ;main.c: 137: if (timer) GPIObits.GP1 = 1;
   520  0060  0828               	movf	_timer,w
   521  0061  0429               	iorwf	_timer+1,w
   522  0062  1903               	btfsc	3,2
   523  0063  2866               	goto	l43
   524  0064  1485               	bsf	5,1	;volatile
   525  0065  2867               	goto	l44
   526  0066                     l43:	
   527                           
   528                           ;main.c: 138: else GPIObits.GP1 = 0;
   529  0066  1085               	bcf	5,1	;volatile
   530  0067                     l44:	
   531                           
   532                           ;main.c: 139: if((0 == GPIObits.GP2) && !timer)
   533  0067  1905               	btfsc	5,2	;volatile
   534  0068  2872               	goto	l838
   535  0069  0828               	movf	_timer,w
   536  006A  0429               	iorwf	_timer+1,w
   537  006B  1D03               	btfss	3,2
   538  006C  2872               	goto	l838
   539                           
   540                           ;main.c: 140: {
   541                           ;main.c: 141: SetTimer(300);
   542  006D  302C               	movlw	44
   543  006E  00AF               	movwf	SetTimer@ticks
   544  006F  3001               	movlw	1
   545  0070  00B0               	movwf	SetTimer@ticks+1
   546  0071  20DD               	fcall	_SetTimer
   547  0072                     l838:	
   548                           
   549                           ;main.c: 142: }
   550                           ;main.c: 143: if((0 == GPIObits.GP4))
   551  0072  1283               	bcf	3,5	;RP0=0, select bank0
   552  0073                     L8:	
   553  0073  1A05               	btfsc	5,4	;volatile
   554  0074  289E               	goto	l796
   555                           
   556                           ;main.c: 144: {
   557                           ;main.c: 145: SetTimer(1);
   558  0075  3001               	movlw	1
   559  0076  00AF               	movwf	SetTimer@ticks
   560  0077  3000               	movlw	0
   561  0078  00B0               	movwf	SetTimer@ticks+1
   562  0079  20DD               	fcall	_SetTimer
   563                           
   564                           ;main.c: 146: system_state = STOPPING_FIST_SIREN;
   565  007A  3005               	movlw	5
   566  007B  2894               	goto	L6
   567  007C                     l47:	
   568                           ;main.c: 149: case STOPPING_FIST_SIREN:
   569                           
   570                           ;main.c: 147: }
   571                           ;main.c: 148: break;
   572                           
   573                           
   574                           ;main.c: 150: GPIObits.GP1 = 1;
   575  007C  1485               	bsf	5,1	;volatile
   576                           
   577                           ;main.c: 151: GPIObits.GP0 = 0;
   578  007D  1005               	bcf	5,0	;volatile
   579                           
   580                           ;main.c: 152: if (0 == timer)
   581  007E  0828               	movf	_timer,w
   582  007F  0429               	iorwf	_timer+1,w
   583  0080  1D03               	btfss	3,2
   584  0081  289E               	goto	l796
   585                           
   586                           ;main.c: 153: {
   587                           ;main.c: 154: SetTimer(1);
   588  0082  3001               	movlw	1
   589  0083  00AF               	movwf	SetTimer@ticks
   590  0084  3000               	movlw	0
   591  0085  00B0               	movwf	SetTimer@ticks+1
   592  0086  20DD               	fcall	_SetTimer
   593                           
   594                           ;main.c: 155: system_state = STOPPING_SECOND_SIREN;
   595  0087  3006               	movlw	6
   596  0088  2894               	goto	L6
   597  0089                     l49:	
   598                           ;main.c: 158: case STOPPING_SECOND_SIREN:
   599                           
   600                           ;main.c: 156: }
   601                           ;main.c: 157: break;
   602                           
   603                           
   604                           ;main.c: 159: GPIObits.GP1 = 0;
   605  0089  1085               	bcf	5,1	;volatile
   606                           
   607                           ;main.c: 160: if (0 == timer)
   608  008A  0828               	movf	_timer,w
   609  008B  0429               	iorwf	_timer+1,w
   610  008C  1D03               	btfss	3,2
   611  008D  289E               	goto	l796
   612                           
   613                           ;main.c: 161: {
   614                           ;main.c: 162: SetTimer(1);
   615  008E  3001               	movlw	1
   616  008F  00AF               	movwf	SetTimer@ticks
   617  0090  3000               	movlw	0
   618  0091  00B0               	movwf	SetTimer@ticks+1
   619  0092  20DD               	fcall	_SetTimer
   620                           
   621                           ;main.c: 163: system_state = STOPPING;
   622  0093  3007               	movlw	7
   623  0094                     L6:	
   624  0094  1283               	bcf	3,5	;RP0=0, select bank0
   625  0095                     L5:	
   626  0095  00B1               	movwf	??_main
   627  0096  0831               	movf	??_main,w
   628  0097  00B3               	movwf	main@system_state
   629                           
   630                           ;main.c: 164: }
   631                           ;main.c: 165: break;
   632  0098  289E               	goto	l796
   633  0099                     l51:	
   634                           ;main.c: 166: case STOPPING:
   635                           
   636                           
   637                           ;main.c: 167: GPIObits.GP1 = 1;
   638  0099  1485               	bsf	5,1	;volatile
   639                           
   640                           ;main.c: 168: if (0 == timer)
   641  009A  0828               	movf	_timer,w
   642  009B  0429               	iorwf	_timer+1,w
   643  009C  1903               	btfsc	3,2
   644                           
   645                           ;main.c: 169: {
   646                           ;main.c: 170: system_state = WITHOUT_PROTECT;
   647  009D  01B3               	clrf	main@system_state
   648  009E                     l796:	
   649                           ;main.c: 87: while(1)
   650                           
   651                           ;main.c: 176: }
   652                           
   653                           ;main.c: 175: break;
   654                           
   655                           ;main.c: 173: default:
   656                           
   657                           ;main.c: 171: }
   658                           ;main.c: 172: break;
   659                           
   660                           
   661                           ;main.c: 88: {
   662                           ;main.c: 89: if(PIR1bits.TMR1IF)
   663  009E  1283               	bcf	3,5	;RP0=0, select bank0
   664  009F  180C               	btfsc	12,0	;volatile
   665  00A0  2824               	goto	l798
   666  00A1                     l862:	
   667  00A1  0833               	movf	main@system_state,w
   668                           
   669                           ; Switch size 1, requested type "space"
   670                           ; Number of cases is 8, Range of values is 0 to 7
   671                           ; switch strategies available:
   672                           ; Name         Instructions Cycles
   673                           ; direct_byte           14     6 (fixed)
   674                           ; simple_byte           25    13 (average)
   675                           ; jumptable            260     6 (fixed)
   676                           ;	Chosen strategy is direct_byte
   677  00A2  0084               	movwf	4
   678  00A3  3008               	movlw	8
   679  00A4  0204               	subwf	4,w
   680  00A5  1803               	skipnc
   681  00A6  289E               	goto	l796
   682  00A7  3000               	movlw	high S900
   683  00A8  008A               	movwf	10
   684  00A9  30E6               	movlw	low S900
   685  00AA  0704               	addwf	4,w
   686  00AB  0082               	movwf	2
   687  00AC  289E               	goto	l796
   688  00AD                     __end_of_main:	
   689                           
   690                           	psect	swtext1
   691  00E6                     __pswtext1:	
   692  00E6                     S900:	
   693  00E6  2830               	ljmp	l32
   694  00E7  283C               	ljmp	l35
   695  00E8  2848               	ljmp	l37
   696  00E9  2859               	ljmp	l40
   697  00EA  2860               	ljmp	l830
   698  00EB  287C               	ljmp	l47
   699  00EC  2889               	ljmp	l49
   700  00ED  2899               	ljmp	l51
   701                           
   702                           	psect	text1
   703  00DD                     __ptext1:	
   704 ;; *************** function _SetTimer *****************
   705 ;; Defined at:
   706 ;;		line 180 in file "main.c"
   707 ;; Parameters:    Size  Location     Type
   708 ;;  ticks           2    4[BANK0 ] unsigned int 
   709 ;; Auto vars:     Size  Location     Type
   710 ;;		None
   711 ;; Return value:  Size  Location     Type
   712 ;;                  1    wreg      void 
   713 ;; Registers used:
   714 ;;		wreg, status,2
   715 ;; Tracked objects:
   716 ;;		On entry : 0/0
   717 ;;		On exit  : 0/0
   718 ;;		Unchanged: 0/0
   719 ;; Data sizes:     COMMON   BANK0
   720 ;;      Params:         0       2
   721 ;;      Locals:         0       0
   722 ;;      Temps:          0       0
   723 ;;      Totals:         0       2
   724 ;;Total ram usage:        2 bytes
   725 ;; Hardware stack levels used:    1
   726 ;; Hardware stack levels required when called:    1
   727 ;; This function calls:
   728 ;;		Nothing
   729 ;; This function is called by:
   730 ;;		_main
   731 ;; This function uses a non-reentrant model
   732 ;;
   733                           
   734                           
   735                           ;psect for function _SetTimer
   736  00DD                     _SetTimer:	
   737                           
   738                           ;main.c: 182: PIR1bits.TMR1IF = 0;
   739                           
   740                           ;incstack = 0
   741                           ; Regs used in _SetTimer: [wreg+status,2]
   742  00DD  1283               	bcf	3,5	;RP0=0, select bank0
   743  00DE  100C               	bcf	12,0	;volatile
   744                           
   745                           ;main.c: 183: timer = ticks;
   746  00DF  0830               	movf	SetTimer@ticks+1,w
   747  00E0  00A9               	movwf	_timer+1
   748  00E1  082F               	movf	SetTimer@ticks,w
   749  00E2  00A8               	movwf	_timer
   750                           
   751                           ;main.c: 184: TMR1 = 0;
   752  00E3  018E               	clrf	14	;volatile
   753  00E4  018F               	clrf	15	;volatile
   754  00E5  0008               	return
   755  00E6                     __end_of_SetTimer:	
   756                           
   757                           	psect	text2
   758  00AD                     __ptext2:	
   759 ;; *************** function _InitApp *****************
   760 ;; Defined at:
   761 ;;		line 22 in file "user.c"
   762 ;; Parameters:    Size  Location     Type
   763 ;;		None
   764 ;; Auto vars:     Size  Location     Type
   765 ;;		None
   766 ;; Return value:  Size  Location     Type
   767 ;;                  1    wreg      void 
   768 ;; Registers used:
   769 ;;		wreg, status,2, status,0
   770 ;; Tracked objects:
   771 ;;		On entry : 0/0
   772 ;;		On exit  : 0/0
   773 ;;		Unchanged: 0/0
   774 ;; Data sizes:     COMMON   BANK0
   775 ;;      Params:         0       0
   776 ;;      Locals:         0       0
   777 ;;      Temps:          0       0
   778 ;;      Totals:         0       0
   779 ;;Total ram usage:        0 bytes
   780 ;; Hardware stack levels used:    1
   781 ;; Hardware stack levels required when called:    1
   782 ;; This function calls:
   783 ;;		Nothing
   784 ;; This function is called by:
   785 ;;		_main
   786 ;; This function uses a non-reentrant model
   787 ;;
   788                           
   789                           
   790                           ;psect for function _InitApp
   791  00AD                     _InitApp:	
   792                           
   793                           ;user.c: 29: OPTION_REG = 0;
   794                           
   795                           ;incstack = 0
   796                           ; Regs used in _InitApp: [wreg+status,2+status,0]
   797  00AD  1683               	bsf	3,5	;RP0=1, select bank1
   798  00AE  0181               	clrf	1	;volatile
   799                           
   800                           ;user.c: 31: T1CONbits.TMR1GE = 0;
   801  00AF  1283               	bcf	3,5	;RP0=0, select bank0
   802  00B0  1310               	bcf	16,6	;volatile
   803                           
   804                           ;user.c: 32: T1CONbits.T1CKPS = 1;
   805  00B1  0810               	movf	16,w	;volatile
   806  00B2  39CF               	andlw	-49
   807  00B3  3810               	iorlw	16
   808  00B4  0090               	movwf	16	;volatile
   809                           
   810                           ;user.c: 33: T1CONbits.T1OSCEN = 0;
   811  00B5  1190               	bcf	16,3	;volatile
   812                           
   813                           ;user.c: 34: T1CONbits.nT1SYNC = 0;
   814  00B6  1110               	bcf	16,2	;volatile
   815                           
   816                           ;user.c: 35: T1CONbits.TMR1CS = 0;
   817  00B7  1090               	bcf	16,1	;volatile
   818                           
   819                           ;user.c: 36: T1CONbits.TMR1ON = 1;
   820  00B8  1410               	bsf	16,0	;volatile
   821                           
   822                           ;user.c: 39: WPUbits.WPU0 = 0;
   823  00B9  1683               	bsf	3,5	;RP0=1, select bank1
   824  00BA  1015               	bcf	21,0	;volatile
   825                           
   826                           ;user.c: 40: WPUbits.WPU1 = 0;
   827  00BB  1095               	bcf	21,1	;volatile
   828                           
   829                           ;user.c: 41: WPUbits.WPU2 = 1;
   830  00BC  1515               	bsf	21,2	;volatile
   831                           
   832                           ;user.c: 42: WPUbits.WPU4 = 1;
   833  00BD  1615               	bsf	21,4	;volatile
   834                           
   835                           ;user.c: 43: WPUbits.WPU5 = 1;
   836  00BE  1695               	bsf	21,5	;volatile
   837                           
   838                           ;user.c: 45: TRISIObits.TRISIO0 = 0;
   839  00BF  1005               	bcf	5,0	;volatile
   840                           
   841                           ;user.c: 46: TRISIObits.TRISIO1 = 0;
   842  00C0  1085               	bcf	5,1	;volatile
   843                           
   844                           ;user.c: 47: TRISIObits.TRISIO2 = 1;
   845  00C1  1505               	bsf	5,2	;volatile
   846                           
   847                           ;user.c: 48: TRISIObits.TRISIO4 = 1;
   848  00C2  1605               	bsf	5,4	;volatile
   849                           
   850                           ;user.c: 49: TRISIObits.TRISIO5 = 1;
   851  00C3  1685               	bsf	5,5	;volatile
   852                           
   853                           ;user.c: 51: VRCON = 0;
   854  00C4  0199               	clrf	25	;volatile
   855                           
   856                           ;user.c: 52: CMCONbits.CM = 7;
   857  00C5  3007               	movlw	7
   858  00C6  1283               	bcf	3,5	;RP0=0, select bank0
   859  00C7  0499               	iorwf	25,f	;volatile
   860  00C8  0008               	return
   861  00C9                     __end_of_InitApp:	
   862                           
   863                           	psect	text3
   864  00EE                     __ptext3:	
   865 ;; *************** function _ConfigureOscillator *****************
   866 ;; Defined at:
   867 ;;		line 18 in file "system.c"
   868 ;; Parameters:    Size  Location     Type
   869 ;;		None
   870 ;; Auto vars:     Size  Location     Type
   871 ;;		None
   872 ;; Return value:  Size  Location     Type
   873 ;;                  1    wreg      void 
   874 ;; Registers used:
   875 ;;		None
   876 ;; Tracked objects:
   877 ;;		On entry : 0/0
   878 ;;		On exit  : 0/0
   879 ;;		Unchanged: 0/0
   880 ;; Data sizes:     COMMON   BANK0
   881 ;;      Params:         0       0
   882 ;;      Locals:         0       0
   883 ;;      Temps:          0       0
   884 ;;      Totals:         0       0
   885 ;;Total ram usage:        0 bytes
   886 ;; Hardware stack levels used:    1
   887 ;; Hardware stack levels required when called:    1
   888 ;; This function calls:
   889 ;;		Nothing
   890 ;; This function is called by:
   891 ;;		_main
   892 ;; This function uses a non-reentrant model
   893 ;;
   894                           
   895                           
   896                           ;psect for function _ConfigureOscillator
   897  00EE                     _ConfigureOscillator:	
   898                           
   899                           ;incstack = 0
   900                           ; Regs used in _ConfigureOscillator: []
   901  00EE  0008               	return
   902  00EF                     __end_of_ConfigureOscillator:	
   903                           
   904                           	psect	text4
   905  00C9                     __ptext4:	
   906 ;; *************** function _isr *****************
   907 ;; Defined at:
   908 ;;		line 23 in file "interrupts.c"
   909 ;; Parameters:    Size  Location     Type
   910 ;;		None
   911 ;; Auto vars:     Size  Location     Type
   912 ;;		None
   913 ;; Return value:  Size  Location     Type
   914 ;;                  1    wreg      void 
   915 ;; Registers used:
   916 ;;		None
   917 ;; Tracked objects:
   918 ;;		On entry : 0/0
   919 ;;		On exit  : 0/0
   920 ;;		Unchanged: 0/0
   921 ;; Data sizes:     COMMON   BANK0
   922 ;;      Params:         0       0
   923 ;;      Locals:         0       0
   924 ;;      Temps:          0       4
   925 ;;      Totals:         0       4
   926 ;;Total ram usage:        4 bytes
   927 ;; Hardware stack levels used:    1
   928 ;; This function calls:
   929 ;;		Nothing
   930 ;; This function is called by:
   931 ;;		Interrupt level 1
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935                           
   936                           ;psect for function _isr
   937  00C9                     _isr:	
   938  00C9  082E               	movf	??_isr+3,w
   939  00CA  00DF               	movwf	95
   940  00CB  082D               	movf	??_isr+2,w
   941  00CC  008A               	movwf	10
   942  00CD  082C               	movf	??_isr+1,w
   943  00CE  0084               	movwf	4
   944  00CF  0E2B               	swapf	??_isr^0,w
   945  00D0  0083               	movwf	3
   946  00D1  0EDE               	swapf	94,f
   947  00D2  0E5E               	swapf	94,w
   948  00D3  0009               	retfie
   949  00D4                     __end_of_isr:	
   950  005E                     btemp	set	94	;btemp
   951  005E                     wtemp0	set	94
   952                           
   953                           	psect	intentry
   954  0004                     __pintentry:	
   955                           ;incstack = 0
   956                           ; Regs used in _isr: []
   957                           
   958  0004                     interrupt_function:	
   959  005E                     saved_w	set	btemp
   960  0004  00DE               	movwf	btemp
   961  0005  0E03               	swapf	3,w
   962  0006  1283               	bcf	3,5	;RP0=0, select bank0
   963  0007  00AB               	movwf	??_isr
   964  0008  0804               	movf	4,w
   965  0009  00AC               	movwf	??_isr+1
   966  000A  080A               	movf	10,w
   967  000B  00AD               	movwf	??_isr+2
   968  000C  085F               	movf	btemp+1,w
   969  000D  00AE               	movwf	??_isr+3
   970  000E  28C9               	ljmp	_isr


Data Sizes:
    Strings     0
    Constant    3
    Data        0
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62      9      20

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_SetTimer

Critical Paths under _isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     479
                                              6 BANK0      3     3      0
                _ConfigureOscillator
                            _InitApp
                           _SetTimer
 ---------------------------------------------------------------------------------
 (1) _SetTimer                                             2     0      2     446
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _SetTimer

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            3E      0       0       3        0.0%
BANK0               3E      9      14       4       32.3%
ABS                  0      0      14       5        0.0%
DATA                 0      0      14       6        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sat Jul 22 12:26:29 2017

                           pc 0002                   __CFG_CP$OFF 0000                            l40 0059  
                          l32 0030                            l51 0099                            l43 0066  
                          l35 003C                            l44 0067                            l37 0048  
                          l47 007C                            l49 0089                            fsr 0004  
                         S900 00E6                           l830 0060                           l838 0072  
                         l862 00A1                           l796 009E                           l798 0024  
                __CFG_CPD$OFF 0000                           _isr 00C9                           fsr0 0004  
                        ?_isr 002B                          _GPIO 0005                          _TMR1 000E  
                        _main 001D                          btemp 005E                 __CFG_BOREN$ON 0000  
                        start 000F               __end_of_InitApp 00C9                         ??_isr 002B  
                       ?_main 002B                 __CFG_WDTE$OFF 0000                         _VRCON 0099  
         _ConfigureOscillator 00EE                 __CFG_PWRTE$ON 0000                         _timer 0028  
                       pclath 000A                         status 0003                         wtemp0 005E  
        ?_ConfigureOscillator 002B                __CFG_MCLRE$OFF 0000               __initialization 0010  
                __end_of_main 00AD              main@system_state 0033                        ??_main 0031  
            __end_of_SetTimer 00E6                     ??_InitApp 0000         ??_ConfigureOscillator 0000  
               SetTimer@ticks 002F                        _num_in 00DA                        saved_w 005E  
     __end_of__initialization 001B                __pcstackCOMMON 0000                    __pbssBANK0 0020  
               unharitate@cnt 0020                     ?_SetTimer 002F                    __pmaintext 001D  
          unharitate@in_state 002A                    __pintentry 0004                    __stringtab 00D4  
                     _WPUbits 0095                       _InitApp 00AD                    ??_SetTimer 0000  
                   _CMCONbits 0019                       __ptext1 00DD                       __ptext2 00AD  
                     __ptext3 00EE                       __ptext4 00C9                     _T1CONbits 0010  
                __size_of_isr 000B          end_of_initialization 001B   __end_of_ConfigureOscillator 00EF  
                  main@inputs 0032                __end_of_num_in 00DD           start_initialization 0010  
                 __end_of_isr 00D4             __size_of_SetTimer 0009                     ___latbits 0000  
               __pcstackBANK0 002B                      ?_InitApp 002B                     __pstrings 00D4  
                   __pswtext1 00E6             interrupt_function 0004                      _GPIObits 0005  
                    _PIR1bits 000C                   __stringbase 00D9              __size_of_InitApp 001C  
                    _SetTimer 00DD            __end_of__stringtab 00DA                 __size_of_main 0090  
__size_of_ConfigureOscillator 0001                      intlevel1 0000                     stringcode 00D4  
                  _OPTION_REG 0081                      stringdir 00D4                      stringtab 00D4  
           __CFG_FOSC$INTRCIO 0000                    _TRISIObits 0085  
